/*
Permission is hereby granted, free of charge, to any person or
organization obtaining a copy of the software and accompanying
documentation covered by this license (the “Software”) to use,
reproduce, display, distribute, execute, and transmit the Software,
and to prepare derivative works of the Software, and to permit
third-parties to whom the Software is furnished to do so, all subject
to the following:

The copyright notices in the Software and this entire statement,
including the above license grant, this restriction and the following
disclaimer, must be included in all copies of the Software, in whole
or in part, and all derivative works of the Software, unless such
copies or derivative works are solely in the form of
machine-executable object code generated by a source language
processor.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND
NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE
DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER
LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

#ifndef __MARIKA_H__
#define __MARIKA_H__

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stddef.h>
#include <stdio.h>

enum _MARIKA_ERRNO {
	MARIKA_ERRNO_NONE = 0,
	MARIKA_ERRNO_NOMEM = 1,
	MARIKA_ERRNO_BROKEN_TREE = 2,
};

typedef struct {
	char reserved[15];      // for future backward compatibility.
	uint8_t errno;          // error number
} marika_error_t;

typedef struct {
	void** nodes;
	int* key_counts0;
	int* key_nums;
	int depth;
} marika_iterator_t;

//// set functions
int mar4Uset(void** pset, uint32_t key, marika_error_t* err);
int mar4Usanity(const void* set, marika_error_t* err);
void mar4Uprint(FILE* fd, const void* set);
int mar4Utest(const void* set, uint32_t key);
void mar4Ufree(void** pset);
size_t mar4Usize(const void* set);
int mar4Ufirst(const void* set, uint32_t* pkey);
int mar4Unext(const void* set, uint32_t* pkey);
int mar4Ulast(const void* set, uint32_t* pkey);
int mar4Uprev(const void* set, uint32_t* pkey);
size_t mar4Ucount(const void* set, uint32_t key1, uint32_t key2);
void mar4Uiterator_init(const void* set, marika_iterator_t* iterator);
void mar4Uiterator_destroy(marika_iterator_t* iterator);
int mar4Uiterate(marika_iterator_t* iterator, uint32_t* index);
size_t mar4Umemused(const void* set);

int mar8Uset(void** pset, uint64_t key, marika_error_t* err);
int mar8Usanity(const void* set, marika_error_t* err);
void mar8Uprint(FILE* fd, const void* set);
int mar8Utest(const void* set, uint64_t key);
void mar8Ufree(void** pset);
size_t mar8Usize(const void* set);
int mar8Ufirst(const void* set, uint64_t* pkey);
int mar8Unext(const void* set, uint64_t* pkey);
int mar8Ulast(const void* set, uint64_t* pkey);
int mar8Uprev(const void* set, uint64_t* pkey);
size_t mar8Umemused(const void* set);
size_t mar8Ucount(const void* set, uint64_t key1, uint64_t key2);
void mar8Uiterator_init(const void* set, marika_iterator_t* iterator);
void mar8Uiterator_destroy(marika_iterator_t* iterator);
int mar8Uiterate(marika_iterator_t* iterator, uint64_t* index);

int mar4Sset(void** pset, int32_t key, marika_error_t* err);
int mar4Ssanity(const void* set, marika_error_t* err);
void mar4Sprint(FILE* fd, const void* set);
int mar4Stest(const void* set, int32_t key);
#define mar4Sfree mar4Ufree
#define mar4Ssize mar4Usize
int mar4Sfirst(const void* set, int32_t* pkey);
int mar4Snext(const void* set, int32_t* pkey);
int mar4Slast(const void* set, int32_t* pkey);
int mar4Sprev(const void* set, int32_t* pkey);
#define mar4Smemused mar4Umemused
size_t mar4Scount(const void* set, int32_t key1, int32_t key2);
#define mar4Siterator_init mar4Uiterator_init
#define mar4Siterator_destroy mar4Uiterator_destroy
#define mar4Siterate(iterator, pkey) mar4Uiterate(iterator, (uint32_t*) pkey)

int mar8Sset(void** pset, int64_t key, marika_error_t* err);
int mar8Ssanity(const void* set, marika_error_t* err);
void mar8Sprint(FILE* fd, const void* set);
int mar8Stest(const void* set, int64_t key);
#define mar8Sfree mar8Ufree
#define mar8Ssize mar8Usize
int mar8Sfirst(const void* set, int64_t* pkey);
int mar8Snext(const void* set, int64_t* pkey);
int mar8Slast(const void* set, int64_t* pkey);
int mar8Sprev(const void* set, int64_t* pkey);
#define mar8Smemused mar8Umemused
size_t mar8Scount(const void* set, int64_t key1, int64_t key2);
#define mar8Siterator_init mar8Uiterator_init
#define mar8Siterator_destroy mar8Uiterator_destroy
#define mar8Siterate(iterator, pkey) mar8Uiterate(iterator, (uint64_t*) pkey)

#define marIset marsizeof[int]Sset
#define marIsanity marsizeof[int]Ssanity
#define marIprint marsizeof[int]Sprint
#define marItest marsizeof[int]Stest
#define marIfree marsizeof[int]Sfree
#define marIsize marsizeof[int]Ssize
#define marIfirst(set, pkey) marsizeof[int]Sfirst(set, (void*) (pkey))
#define marInext(set, pkey) marsizeof[int]Snext(set, (void*) (pkey))
#define marIlast(set, pkey) marsizeof[int]Slast(set, (void*) (pkey))
#define marIprev(set, pkey) marsizeof[int]Sprev(set, (void*) (pkey))
#define marIcount marsizeof[int]Scount
#define marIiterator_init marsizeof[int]Siterator_init
#define marIiterator_destroy marsizeof[int]Siterator_destroy
#define marIiterate(set, pkey) marsizeof[int]Siterate(set, (void*) (pkey))
#define marImemused marsizeof[int]Smemused

#define marUset marsizeof[int]Uset
#define marUsanity marsizeof[int]Usanity
#define marUprint marsizeof[int]Uprint
#define marUtest marsizeof[int]Utest
#define marUfree marsizeof[int]Ufree
#define marUsize marsizeof[int]Usize
#define marUfirst(set, pkey) marsizeof[int]Ufirst(set, (void*) (pkey))
#define marUnext(set, pkey) marsizeof[int]Unext(set, (void*) (pkey))
#define marUlast(set, pkey) marsizeof[int]Ulast(set, (void*) (pkey))
#define marUprev(set, pkey) marsizeof[int]Uprev(set, (void*) (pkey))
#define marUcount marsizeof[int]Ucount
#define marUiterator_init marsizeof[int]Uiterator_init
#define marUiterator_destroy marsizeof[int]Uiterator_destroy
#define marUiterate(set, pkey) marsizeof[int]Uiterate(set, (void*) (pkey))
#define marUmemused marsizeof[int]Umemused

#define marLset marsizeof[long]Sset
#define marLsanity marsizeof[long]Ssanity
#define marLprint marsizeof[long]Sprint
#define marLtest marsizeof[long]Stest
#define marLfree marsizeof[long]Sfree
#define marLsize marsizeof[long]Ssize
#define marLfirst(set, pkey) marsizeof[long]Sfirst(set, (void*) (pkey))
#define marLnext(set, pkey) marsizeof[long]Snext(set, (void*) (pkey))
#define marLlast(set, pkey) marsizeof[long]Slast(set, (void*) (pkey))
#define marLprev(set, pkey) marsizeof[long]Sprev(set, (void*) (pkey))
#define marLcount marsizeof[long]Scount
#define marLiterator_init marsizeof[long]Siterator_init
#define marLiterator_destroy marsizeof[long]Siterator_destroy
#define marLiterate(set, pkey) marsizeof[long]Siterate(set, (void*) (pkey))
#define marLmemused marsizeof[long]Smemused

#define marLUset marsizeof[long]Uset
#define marLUsanity marsizeof[long]Usanity
#define marLUprint marsizeof[long]Uprint
#define marLUtest marsizeof[long]Utest
#define marLUfree marsizeof[long]Ufree
#define marLUsize marsizeof[long]Usize
#define marLUfirst(set, pkey) marsizeof[long]Ufirst(set, (void*) (pkey))
#define marLUnext(set, pkey) marsizeof[long]Unext(set, (void*) (pkey))
#define marLUlast(set, pkey) marsizeof[long]Ulast(set, (void*) (pkey))
#define marLUprev(set, pkey) marsizeof[long]Uprev(set, (void*) (pkey))
#define marLUcount marsizeof[long]Ucount
#define marLUiterator_init marsizeof[long]Uiterator_init
#define marLUiterator_destroy marsizeof[long]Uiterator_destroy
#define marLUiterate(set, pkey) marsizeof[long]Uiterate(set, (void*) (pkey))
#define marLUmemused marsizeof[long]Umemused

//// map functions
uint32_t* mar4U4Uput(void** pmap, uint32_t index, int* new_item, marika_error_t* err);
uint32_t* mar4U4Uins(void** pmap, uint32_t index, marika_error_t* err);
uint32_t* mar4U4Uget(const void* map, uint32_t index);
int mar4U4Usanity(const void* map, marika_error_t* err);
void mar4U4Uprint(FILE* fd, const void* map);
uint32_t* mar4U4Ufirst(const void* map, uint32_t* pkey);
uint32_t* mar4U4Unext(const void* map, uint32_t* pkey);
uint32_t* mar4U4Ulast(const void* map, uint32_t* pkey);
uint32_t* mar4U4Uprev(const void* map, uint32_t* pkey);
#define mar4U4Usize mar4Usize
#define mar4U4Ufree mar4Ufree
#define mar4U4Umemused mar4Umemused
size_t mar4U4Ucount(const void* set, uint32_t key1, uint32_t key2);
void mar4U4Uiterator_init(const void* map, marika_iterator_t* iterator);
void mar4U4Uiterator_destroy(marika_iterator_t* iterator);
uint32_t* mar4U4Uiterate(marika_iterator_t* iterator, uint32_t* pkey);

uint32_t* mar4S4Uput(void** pmap, int32_t index, int* new_item, marika_error_t* err);
uint32_t* mar4S4Uins(void** pmap, int32_t index, marika_error_t* err);
uint32_t* mar4S4Uget(const void* map, int32_t index);
int mar4S4Usanity(const void* map, marika_error_t* err);
void mar4S4Uprint(FILE* fd, const void* map);
uint32_t* mar4S4Ufirst(const void* map, int32_t* pkey);
uint32_t* mar4S4Unext(const void* map, int32_t* pkey);
uint32_t* mar4S4Ulast(const void* map, int32_t* pkey);
uint32_t* mar4S4Uprev(const void* map, int32_t* pkey);
#define mar4S4Usize mar4U4Usize
#define mar4S4Ufree mar4U4Ufree
#define mar4S4Umemused mar4U4Umemused
size_t mar4S4Ucount(const void* set, int32_t key1, int32_t key2);
#define mar4S4Uiterator_init mar4U4Uiterator_init
#define mar4S4Uiterator_destroy mar4U4Uiterator_destroy
#define mar4S4Uiterate(iterator, pkey) mar4U4Uiterate(iterator, (uint32_t*) pkey)

#define mar4U4Sput (int32_t*) mar4U4Uput
#define mar4U4Sins (int32_t*) mar4U4Uins
#define mar4U4Sget (int32_t*) mar4U4Uget
#define mar4U4Ssanity mar4U4Usanity
void mar4U4Sprint(FILE* fd, const void* map);
#define mar4U4Sfirst (int32_t*) mar4U4Ufirst
#define mar4U4Snext (int32_t*) mar4U4Unext
#define mar4U4Slast (int32_t*) mar4U4Ulast
#define mar4U4Sprev (int32_t*) mar4U4Uprev
#define mar4U4Ssize mar4U4Usize
#define mar4U4Sfree mar4U4Ufree
#define mar4U4Smemused mar4U4Umemused
#define mar4U4Scount mar4U4Ucount
#define mar4U4Siterator_init mar4U4Uiterator_init
#define mar4U4Siterator_destroy mar4U4Uiterator_destroy
#define mar4U4Siterate (int32_t*) mar4U4Uiterate

#define mar4S4Sput (int32_t*) mar4S4Uput
#define mar4S4Sins (int32_t*) mar4S4Uins
#define mar4S4Sget (int32_t*) mar4S4Uget
#define mar4S4Ssanity mar4S4Usanity
void mar4S4Sprint(FILE* fd, const void* map);
#define mar4S4Sfirst (int32_t*) mar4S4Ufirst
#define mar4S4Snext (int32_t*) mar4S4Unext
#define mar4S4Slast (int32_t*) mar4S4Ulast
#define mar4S4Sprev (int32_t*) mar4S4Uprev
#define mar4S4Ssize mar4S4Usize
#define mar4S4Sfree mar4S4Ufree
#define mar4S4Smemused mar4S4Umemused
#define mar4S4Scount mar4S4Ucount
#define mar4S4Siterator_init mar4S4Uiterator_init
#define mar4S4Siterator_destroy mar4S4Uiterator_destroy
#define mar4S4Siterate (int32_t*) mar4S4Uiterate

uint64_t* mar8U8Uput(void** pmap, uint64_t index, int* new_item, marika_error_t* err);
uint64_t* mar8U8Uins(void** pmap, uint64_t index, marika_error_t* err);
uint64_t* mar8U8Uget(const void* map, uint64_t index);
int mar8U8Usanity(const void* map, marika_error_t* err);
void mar8U8Uprint(FILE* fd, const void* map);
uint64_t* mar8U8Ufirst(const void* map, uint64_t* pkey);
uint64_t* mar8U8Unext(const void* map, uint64_t* pkey);
uint64_t* mar8U8Ulast(const void* map, uint64_t* pkey);
uint64_t* mar8U8Uprev(const void* map, uint64_t* pkey);
#define mar8U8Usize mar8Usize
#define mar8U8Ufree mar8Ufree
#define mar8U8Umemused mar8Umemused
size_t mar8U8Ucount(const void* set, uint64_t key1, uint64_t key2);
void mar8U8Uiterator_init(const void* map, marika_iterator_t* iterator);
void mar8U8Uiterator_destroy(marika_iterator_t* iterator);
uint64_t* mar8U8Uiterate(marika_iterator_t* iterator, uint64_t* pkey);

uint64_t* mar8S8Uput(void** pmap, int64_t index, int* new_item, marika_error_t* err);
uint64_t* mar8S8Uins(void** pmap, int64_t index, marika_error_t* err);
uint64_t* mar8S8Uget(const void* map, int64_t index);
int mar8S8Usanity(const void* map, marika_error_t* err);
void mar8S8Uprint(FILE* fd, const void* map);
uint64_t* mar8S8Ufirst(const void* map, int64_t* pkey);
uint64_t* mar8S8Unext(const void* map, int64_t* pkey);
uint64_t* mar8S8Ulast(const void* map, int64_t* pkey);
uint64_t* mar8S8Uprev(const void* map, int64_t* pkey);
#define mar8S8Usize mar8U8Usize
#define mar8S8Ufree mar8U8Ufree
#define mar8S8Umemused mar8U8Umemused
size_t mar8S8Ucount(const void* set, int64_t key1, int64_t key2);
#define mar8S8Uiterator_init mar8U8Uiterator_init
#define mar8S8Uiterator_destroy mar8U8Uiterator_destroy
#define mar8S8Uiterate(iterator, pkey) mar8U8Uiterate(iterator, (uint64_t*) pkey)

#define mar8U8Sput (int64_t*) mar8U8Uput
#define mar8U8Sins (int64_t*) mar8U8Uins
#define mar8U8Sget (int64_t*) mar8U8Uget
#define mar8U8Ssanity mar8U8Usanity
void mar8U8Sprint(FILE* fd, const void* map);
#define mar8U8Sfirst (int64_t*) mar8U8Ufirst
#define mar8U8Snext (int64_t*) mar8U8Unext
#define mar8U8Slast (int64_t*) mar8U8Ulast
#define mar8U8Sprev (int64_t*) mar8U8Uprev
#define mar8U8Ssize mar8U8Usize
#define mar8U8Sfree mar8U8Ufree
#define mar8U8Smemused mar8U8Umemused
#define mar8U8Scount mar8U8Ucount
#define mar8U8Siterator_init mar8U8Uiterator_init
#define mar8U8Siterator_destroy mar8U8Uiterator_destroy
#define mar8U8Siterate (int64_t*) mar8U8Uiterate

#define mar8S8Sput (int64_t*) mar8S8Uput
#define mar8S8Sins (int64_t*) mar8S8Uins
#define mar8S8Sget (int64_t*) mar8S8Uget
#define mar8S8Ssanity mar8S8Usanity
void mar8S8Sprint(FILE* fd, const void* map);
#define mar8S8Sfirst (int64_t*) mar8S8Ufirst
#define mar8S8Snext (int64_t*) mar8S8Unext
#define mar8S8Slast (int64_t*) mar8S8Ulast
#define mar8S8Sprev (int64_t*) mar8S8Uprev
#define mar8S8Ssize mar8S8Usize
#define mar8S8Sfree mar8S8Ufree
#define mar8S8Smemused mar8S8Umemused
#define mar8S8Scount mar8S8Ucount
#define mar8S8Siterator_init mar8S8Uiterator_init
#define mar8S8Siterator_destroy mar8S8Uiterator_destroy
#define mar8S8Siterate (int64_t*) mar8S8Uiterate

uint64_t* mar4U8Uput(void** pmap, uint32_t index, int* new_item, marika_error_t* err);
uint64_t* mar4U8Uins(void** pmap, uint32_t index, marika_error_t* err);
uint64_t* mar4U8Uget(const void* map, uint32_t index);
int mar4U8Usanity(const void* map, marika_error_t* err);
void mar4U8Uprint(FILE* fd, const void* map);
uint64_t* mar4U8Ufirst(const void* map, uint32_t* pkey);
uint64_t* mar4U8Unext(const void* map, uint32_t* pkey);
uint64_t* mar4U8Ulast(const void* map, uint32_t* pkey);
uint64_t* mar4U8Uprev(const void* map, uint32_t* pkey);
#define mar4U8Usize mar4Usize
#define mar4U8Ufree mar4Ufree
#define mar4U8Umemused mar4Umemused
size_t mar4U8Ucount(const void* map, uint32_t key1, uint32_t key2);
void mar4U8Uiterator_init(const void* map, marika_iterator_t* iterator);
void mar4U8Uiterator_destroy(marika_iterator_t* iterator);
uint64_t* mar4U8Uiterate(marika_iterator_t* iterator, uint32_t* pkey);

#define mar4U8Sput (int64_t*) mar4U8Uput
#define mar4U8Sins (int64_t*) mar4U8Uins
#define mar4U8Sget (int64_t*) mar4U8Uget
#define mar4U8Ssanity mar4U8Usanity
void mar4U8Sprint(FILE* fd, const void* map);
#define mar4U8Sfirst (int64_t*) mar4U8Ufirst
#define mar4U8Snext (int64_t*) mar4U8Unext
#define mar4U8Slast (int64_t*) mar4U8Ulast
#define mar4U8Sprev (int64_t*) mar4U8Uprev
#define mar4U8Ssize mar4U8Usize
#define mar4U8Sfree mar4U8Ufree
#define mar4U8Smemused mar4U8Umemused
#define mar4U8Scount mar4U8Ucount
#define mar4U8Siterator_init mar4U8Uiterator_init
#define mar4U8Siterator_destroy mar4U8Uiterator_destroy
#define mar4U8Siterate (int64_t*) mar4U8Uiterate

uint64_t* mar4S8Uput(void** pmap, int32_t index, int* new_item, marika_error_t* err);
uint64_t* mar4S8Uins(void** pmap, int32_t index, marika_error_t* err);
uint64_t* mar4S8Uget(const void* map, int32_t index);
int mar4S8Usanity(const void* map, marika_error_t* err);
void mar4S8Uprint(FILE* fd, const void* map);
uint64_t* mar4S8Ufirst(const void* map, int32_t* pkey);
uint64_t* mar4S8Unext(const void* map, int32_t* pkey);
uint64_t* mar4S8Ulast(const void* map, int32_t* pkey);
uint64_t* mar4S8Uprev(const void* map, int32_t* pkey);
#define mar4S8Usize mar4U8Usize
#define mar4S8Ufree mar4U8Ufree
#define mar4S8Umemused mar4U8Umemused
size_t mar4S8Ucount(const void* map, int32_t key1, int32_t key2);
#define mar4S8Uiterator_init mar4U8Uiterator_init
#define mar4S8Uiterator_destroy mar4U8Uiterator_destroy
#define mar4S8Uiterate(iterator, pkey) mar4U8Uiterate(iterator, (uint32_t*) pkey)

#define mar4S8Sput (int64_t*) mar4S8Uput
#define mar4S8Sins (int64_t*) mar4S8Uins
#define mar4S8Sget (int64_t*) mar4S8Uget
#define mar4S8Ssanity mar4S8Usanity
void mar4S8Sprint(FILE* fd, const void* map);
#define mar4S8Sfirst (int64_t*) mar4S8Ufirst
#define mar4S8Snext (int64_t*) mar4S8Unext
#define mar4S8Slast (int64_t*) mar4S8Ulast
#define mar4S8Sprev (int64_t*) mar4S8Uprev
#define mar4S8Ssize mar4S8Usize
#define mar4S8Sfree mar4S8Ufree
#define mar4S8Smemused mar4S8Umemused
#define mar4S8Scount mar4S8Ucount
#define mar4S8Siterator_init mar4S8Uiterator_init
#define mar4S8Siterator_destroy mar4S8Uiterator_destroy
#define mar4S8Siterate (int64_t*) mar4S8Uiterate

uint32_t* mar8U4Uput(void** pmap, uint64_t index, int* new_item, marika_error_t* err);
uint32_t* mar8U4Uins(void** pmap, uint64_t index, marika_error_t* err);
uint32_t* mar8U4Uget(const void* map, uint64_t index);
int mar8U4Usanity(const void* map, marika_error_t* err);
void mar8U4Uprint(FILE* fd, const void* map);
uint32_t* mar8U4Ufirst(const void* map, uint64_t* pkey);
uint32_t* mar8U4Unext(const void* map, uint64_t* pkey);
uint32_t* mar8U4Ulast(const void* map, uint64_t* pkey);
uint32_t* mar8U4Uprev(const void* map, uint64_t* pkey);
#define mar8U4Usize mar8Usize
#define mar8U4Ufree mar8Ufree
#define mar8U4Umemused mar8Umemused
size_t mar8U4Ucount(const void* set, uint64_t key1, uint64_t key2);
void mar8U4Uiterator_init(const void* map, marika_iterator_t* iterator);
void mar8U4Uiterator_destroy(marika_iterator_t* iterator);
uint32_t* mar8U4Uiterate(marika_iterator_t* iterator, uint64_t* pkey);

#define mar8U4Sput (int32_t*) mar8U4Uput
#define mar8U4Sins (int32_t*) mar8U4Uins
#define mar8U4Sget (int32_t*) mar8U4Uget
#define mar8U4Ssanity mar8U4Usanity
void mar8U4Sprint(FILE* fd, const void* map);
#define mar8U4Sfirst (int32_t*) mar8U4Ufirst
#define mar8U4Snext (int32_t*) mar8U4Unext
#define mar8U4Slast (int32_t*) mar8U4Ulast
#define mar8U4Sprev (int32_t*) mar8U4Uprev
#define mar8U4Ssize mar8U4Usize
#define mar8U4Sfree mar8U4Ufree
#define mar8U4Smemused mar8U4Umemused
#define mar8U4Scount mar8U4Ucount
#define mar8U4Siterator_init mar8U4Uiterator_init
#define mar8U4Siterator_destroy mar8U4Uiterator_destroy
#define mar8U4Siterate (int32_t*) mar8U4Uiterate

uint32_t* mar8S4Uput(void** pmap, int64_t index, int* new_item, marika_error_t* err);
uint32_t* mar8S4Uins(void** pmap, int64_t index, marika_error_t* err);
uint32_t* mar8S4Uget(const void* map, int64_t index);
int mar8S4Usanity(const void* map, marika_error_t* err);
void mar8S4Uprint(FILE* fd, const void* map);
uint32_t* mar8S4Ufirst(const void* map, int64_t* pkey);
uint32_t* mar8S4Unext(const void* map, int64_t* pkey);
uint32_t* mar8S4Ulast(const void* map, int64_t* pkey);
uint32_t* mar8S4Uprev(const void* map, int64_t* pkey);
#define mar8S4Usize mar8U4Usize
#define mar8S4Ufree mar8U4Ufree
#define mar8S4Umemused mar8U4Umemused
size_t mar8S4Ucount(const void* set, int64_t key1, int64_t key2);
#define mar8S4Uiterator_init mar8U4Uiterator_init
#define mar8S4Uiterator_destroy mar8U4Uiterator_destroy
#define mar8S4Uiterate(iterator, pkey) mar8U4Uiterate(iterator, (uint64_t*) pkey)

#define mar8S4Sput (int32_t*) mar8S4Uput
#define mar8S4Sins (int32_t*) mar8S4Uins
#define mar8S4Sget (int32_t*) mar8S4Uget
#define mar8S4Ssanity mar8S4Usanity
void mar8S4Sprint(FILE* fd, const void* map);
#define mar8S4Sfirst (int32_t*) mar8S4Ufirst
#define mar8S4Snext (int32_t*) mar8S4Unext
#define mar8S4Slast (int32_t*) mar8S4Ulast
#define mar8S4Sprev (int32_t*) mar8S4Uprev
#define mar8S4Ssize mar8S4Usize
#define mar8S4Sfree mar8S4Ufree
#define mar8S4Smemused mar8S4Umemused
#define mar8S4Scount mar8S4Ucount
#define mar8S4Siterator_init mar8S4Uiterator_init
#define mar8S4Siterator_destroy mar8S4Uiterator_destroy
#define mar8S4Siterate (int32_t*) mar8S4Uiterate

//
#define marIUIUput (unsigned*) marsizeof[int]Usizeof[int]Uput
#define marIUIUins (unsigned*) marsizeof[int]Usizeof[int]Uins
#define marIUIUget (unsigned*) marsizeof[int]Usizeof[int]Uget
#define marIUIUsanity marsizeof[int]Usizeof[int]Usanity
#define marIUIUprint marsizeof[int]Usizeof[int]Uprint
#define marIUIUfirst(set, pkey) (unsigned*) marsizeof[int]Usizeof[int]Ufirst(set, (void*) (pkey))
#define marIUIUnext(set, pkey) (unsigned*) marsizeof[int]Usizeof[int]Unext(set, (void*) (pkey))
#define marIUIUlast(set, pkey) (unsigned*) marsizeof[int]Usizeof[int]Ulast(set, (void*) (pkey))
#define marIUIUprev(set, pkey) (unsigned*) marsizeof[int]Usizeof[int]Uprev(set, (void*) (pkey))
#define marIUIUsize marsizeof[int]Usizeof[int]Usize
#define marIUIUfree marsizeof[int]Usizeof[int]Ufree
#define marIUIUmemused marsizeof[int]Usizeof[int]Umemused
#define marIUIUcount marsizeof[int]Usizeof[int]Ucount
#define marIUIUiterator_init marsizeof[int]Usizeof[int]Uiterator_init
#define marIUIUiterator_destroy marsizeof[int]Usizeof[int]Uiterator_destroy
#define marIUIUiterate(set, pkey) (unsigned*) marsizeof[int]Usizeof[int]Uiterate(set, (void*) (pkey))

#define marIUISput (int*) marsizeof[int]Usizeof[int]Sput
#define marIUISins (int*) marsizeof[int]Usizeof[int]Sins
#define marIUISget (int*) marsizeof[int]Usizeof[int]Sget
#define marIUISsanity marsizeof[int]Usizeof[int]Ssanity
#define marIUISprint marsizeof[int]Usizeof[int]Sprint
#define marIUISfirst(set, pkey) (int*) marsizeof[int]Usizeof[int]Sfirst(set, (void*) (pkey))
#define marIUISnext(set, pkey) (int*) marsizeof[int]Usizeof[int]Snext(set, (void*) (pkey))
#define marIUISlast(set, pkey) (int*) marsizeof[int]Usizeof[int]Slast(set, (void*) (pkey))
#define marIUISprev(set, pkey) (int*) marsizeof[int]Usizeof[int]Sprev(set, (void*) (pkey))
#define marIUISsize marsizeof[int]Usizeof[int]Ssize
#define marIUISfree marsizeof[int]Usizeof[int]Sfree
#define marIUISmemused marsizeof[int]Usizeof[int]Smemused
#define marIUIScount marsizeof[int]Usizeof[int]Scount
#define marIUISiterator_init marsizeof[int]Usizeof[int]Siterator_init
#define marIUISiterator_destroy marsizeof[int]Usizeof[int]Siterator_destroy
#define marIUISiterate(set, pkey) (int*) marsizeof[int]Usizeof[int]Siterate(set, (void*) (pkey))

#define marISIUput (unsigned*) marsizeof[int]Ssizeof[int]Uput
#define marISIUins (unsigned*) marsizeof[int]Ssizeof[int]Uins
#define marISIUget (unsigned*) marsizeof[int]Ssizeof[int]Uget
#define marISIUsanity marsizeof[int]Ssizeof[int]Usanity
#define marISIUprint marsizeof[int]Ssizeof[int]Uprint
#define marISIUfirst(set, pkey) (unsigned*) marsizeof[int]Ssizeof[int]Ufirst(set, (void*) (pkey))
#define marISIUnext(set, pkey) (unsigned*) marsizeof[int]Ssizeof[int]Unext(set, (void*) (pkey))
#define marISIUlast(set, pkey) (unsigned*) marsizeof[int]Ssizeof[int]Ulast(set, (void*) (pkey))
#define marISIUprev(set, pkey) (unsigned*) marsizeof[int]Ssizeof[int]Uprev(set, (void*) (pkey))
#define marISIUsize marsizeof[int]Ssizeof[int]Usize
#define marISIUfree marsizeof[int]Ssizeof[int]Ufree
#define marISIUmemused marsizeof[int]Ssizeof[int]Umemused
#define marISIUcount marsizeof[int]Ssizeof[int]Ucount
#define marISIUiterator_init marsizeof[int]Ssizeof[int]Uiterator_init
#define marISIUiterator_destroy marsizeof[int]Ssizeof[int]Uiterator_destroy
#define marISIUiterate(set, pkey) (unsigned*) marsizeof[int]Ssizeof[int]Uiterate(set, (void*) (pkey))

#define marISISput (int*) marsizeof[int]Ssizeof[int]Sput
#define marISISins (int*) marsizeof[int]Ssizeof[int]Sins
#define marISISget (int*) marsizeof[int]Ssizeof[int]Sget
#define marISISsanity marsizeof[int]Ssizeof[int]Ssanity
#define marISISprint marsizeof[int]Ssizeof[int]Sprint
#define marISISfirst(set, pkey) (int*) marsizeof[int]Ssizeof[int]Sfirst(set, (void*) (pkey))
#define marISISnext(set, pkey) (int*) marsizeof[int]Ssizeof[int]Snext(set, (void*) (pkey))
#define marISISlast(set, pkey) (int*) marsizeof[int]Ssizeof[int]Slast(set, (void*) (pkey))
#define marISISprev(set, pkey) (int*) marsizeof[int]Ssizeof[int]Sprev(set, (void*) (pkey))
#define marISISsize marsizeof[int]Ssizeof[int]Ssize
#define marISISfree marsizeof[int]Ssizeof[int]Sfree
#define marISISmemused marsizeof[int]Ssizeof[int]Smemused
#define marISIScount marsizeof[int]Ssizeof[int]Scount
#define marISISiterator_init marsizeof[int]Ssizeof[int]Siterator_init
#define marISISiterator_destroy marsizeof[int]Ssizeof[int]Siterator_destroy
#define marISISiterate(set, pkey) (int*) marsizeof[int]Ssizeof[int]Siterate(set, (void*) (pkey))

#define marLUIUput (unsigned*) marsizeof[long]Usizeof[int]Uput
#define marLUIUins (unsigned*) marsizeof[long]Usizeof[int]Uins
#define marLUIUget (unsigned*) marsizeof[long]Usizeof[int]Uget
#define marLUIUsanity marsizeof[long]Usizeof[int]Usanity
#define marLUIUprint marsizeof[long]Usizeof[int]Uprint
#define marLUIUfirst(set, pkey) (unsigned*) marsizeof[long]Usizeof[int]Ufirst(set, (void*) (pkey))
#define marLUIUnext(set, pkey) (unsigned*) marsizeof[long]Usizeof[int]Unext(set, (void*) (pkey))
#define marLUIUlast(set, pkey) (unsigned*) marsizeof[long]Usizeof[int]Ulast(set, (void*) (pkey))
#define marLUIUprev(set, pkey) (unsigned*) marsizeof[long]Usizeof[int]Uprev(set, (void*) (pkey))
#define marLUIUsize marsizeof[long]Usizeof[int]Usize
#define marLUIUfree marsizeof[long]Usizeof[int]Ufree
#define marLUIUmemused marsizeof[long]Usizeof[int]Umemused
#define marLUIUcount marsizeof[long]Usizeof[int]Ucount
#define marLUIUiterator_init marsizeof[long]Usizeof[int]Uiterator_init
#define marLUIUiterator_destroy marsizeof[long]Usizeof[int]Uiterator_destroy
#define marLUIUiterate(set, pkey) (unsigned*) marsizeof[long]Usizeof[int]Uiterate(set, (void*) (pkey))

#define marLUISput (int*) marsizeof[long]Usizeof[int]Sput
#define marLUISins (int*) marsizeof[long]Usizeof[int]Sins
#define marLUISget (int*) marsizeof[long]Usizeof[int]Sget
#define marLUISsanity marsizeof[long]Usizeof[int]Ssanity
#define marLUISprint marsizeof[long]Usizeof[int]Sprint
#define marLUISfirst(set, pkey) (int*) marsizeof[long]Usizeof[int]Sfirst(set, (void*) (pkey))
#define marLUISnext(set, pkey) (int*) marsizeof[long]Usizeof[int]Snext(set, (void*) (pkey))
#define marLUISlast(set, pkey) (int*) marsizeof[long]Usizeof[int]Slast(set, (void*) (pkey))
#define marLUISprev(set, pkey) (int*) marsizeof[long]Usizeof[int]Sprev(set, (void*) (pkey))
#define marLUISsize marsizeof[long]Usizeof[int]Ssize
#define marLUISfree marsizeof[long]Usizeof[int]Sfree
#define marLUISmemused marsizeof[long]Usizeof[int]Smemused
#define marLUIScount marsizeof[long]Usizeof[int]Scount
#define marLUISiterator_init marsizeof[long]Usizeof[int]Siterator_init
#define marLUISiterator_destroy marsizeof[long]Usizeof[int]Siterator_destroy
#define marLUISiterate(set, pkey) (int*) marsizeof[long]Usizeof[int]Siterate(set, (void*) (pkey))

#define marLSIUput (unsigned*) marsizeof[long]Ssizeof[int]Uput
#define marLSIUins (unsigned*) marsizeof[long]Ssizeof[int]Uins
#define marLSIUget (unsigned*) marsizeof[long]Ssizeof[int]Uget
#define marLSIUsanity marsizeof[long]Ssizeof[int]Usanity
#define marLSIUprint marsizeof[long]Ssizeof[int]Uprint
#define marLSIUfirst(set, pkey) (unsigned*) marsizeof[long]Ssizeof[int]Ufirst(set, (void*) (pkey))
#define marLSIUnext(set, pkey) (unsigned*) marsizeof[long]Ssizeof[int]Unext(set, (void*) (pkey))
#define marLSIUlast(set, pkey) (unsigned*) marsizeof[long]Ssizeof[int]Ulast(set, (void*) (pkey))
#define marLSIUprev(set, pkey) (unsigned*) marsizeof[long]Ssizeof[int]Uprev(set, (void*) (pkey))
#define marLSIUsize marsizeof[long]Ssizeof[int]Usize
#define marLSIUfree marsizeof[long]Ssizeof[int]Ufree
#define marLSIUmemused marsizeof[long]Ssizeof[int]Umemused
#define marLSIUcount marsizeof[long]Ssizeof[int]Ucount
#define marLSIUiterator_init marsizeof[long]Ssizeof[int]Uiterator_init
#define marLSIUiterator_destroy marsizeof[long]Ssizeof[int]Uiterator_destroy
#define marLSIUiterate(set, pkey) (unsigned*) marsizeof[long]Ssizeof[int]Uiterate(set, (void*) (pkey))

#define marLSISput (int*) marsizeof[long]Ssizeof[int]Sput
#define marLSISins (int*) marsizeof[long]Ssizeof[int]Sins
#define marLSISget (int*) marsizeof[long]Ssizeof[int]Sget
#define marLSISsanity marsizeof[long]Ssizeof[int]Ssanity
#define marLSISprint marsizeof[long]Ssizeof[int]Sprint
#define marLSISfirst(set, pkey) (int*) marsizeof[long]Ssizeof[int]Sfirst(set, (void*) (pkey))
#define marLSISnext(set, pkey) (int*) marsizeof[long]Ssizeof[int]Snext(set, (void*) (pkey))
#define marLSISlast(set, pkey) (int*) marsizeof[long]Ssizeof[int]Slast(set, (void*) (pkey))
#define marLSISprev(set, pkey) (int*) marsizeof[long]Ssizeof[int]Sprev(set, (void*) (pkey))
#define marLSISsize marsizeof[long]Ssizeof[int]Ssize
#define marLSISfree marsizeof[long]Ssizeof[int]Sfree
#define marLSISmemused marsizeof[long]Ssizeof[int]Smemused
#define marLSIScount marsizeof[long]Ssizeof[int]Scount
#define marLSISiterator_init marsizeof[long]Ssizeof[int]Siterator_init
#define marLSISiterator_destroy marsizeof[long]Ssizeof[int]Siterator_destroy
#define marLSISiterate(set, pkey) (int*) marsizeof[long]Ssizeof[int]Siterate(set, (void*) (pkey))

#define marIULUput (unsigned long*) marsizeof[int]Usizeof[long]Uput
#define marIULUins (unsigned long*) marsizeof[int]Usizeof[long]Uins
#define marIULUget (unsigned long*) marsizeof[int]Usizeof[long]Uget
#define marIULUsanity marsizeof[int]Usizeof[long]Usanity
#define marIULUprint marsizeof[int]Usizeof[long]Uprint
#define marIULUfirst(set, pkey) (unsigned long*) marsizeof[int]Usizeof[long]Ufirst(set, (void*) (pkey))
#define marIULUnext(set, pkey) (unsigned long*) marsizeof[int]Usizeof[long]Unext(set, (void*) (pkey))
#define marIULUlast(set, pkey) (unsigned long*) marsizeof[int]Usizeof[long]Ulast(set, (void*) (pkey))
#define marIULUprev(set, pkey) (unsigned long*) marsizeof[int]Usizeof[long]Uprev(set, (void*) (pkey))
#define marIULUsize marsizeof[int]Usizeof[long]Usize
#define marIULUfree marsizeof[int]Usizeof[long]Ufree
#define marIULUmemused marsizeof[int]Usizeof[long]Umemused
#define marIULUcount marsizeof[int]Usizeof[long]Ucount
#define marIULUiterator_init marsizeof[int]Usizeof[long]Uiterator_init
#define marIULUiterator_destroy marsizeof[int]Usizeof[long]Uiterator_destroy
#define marIULUiterate(set, pkey) (unsigned long*) marsizeof[int]Usizeof[long]Uiterate(set, (void*) (pkey))

#define marIULSput (long*) marsizeof[int]Usizeof[long]Sput
#define marIULSins (long*) marsizeof[int]Usizeof[long]Sins
#define marIULSget (long*) marsizeof[int]Usizeof[long]Sget
#define marIULSsanity marsizeof[int]Usizeof[long]Ssanity
#define marIULSprint marsizeof[int]Usizeof[long]Sprint
#define marIULSfirst(set, pkey) (long*) marsizeof[int]Usizeof[long]Sfirst(set, (void*) (pkey))
#define marIULSnext(set, pkey) (long*) marsizeof[int]Usizeof[long]Snext(set, (void*) (pkey))
#define marIULSlast(set, pkey) (long*) marsizeof[int]Usizeof[long]Slast(set, (void*) (pkey))
#define marIULSprev(set, pkey) (long*) marsizeof[int]Usizeof[long]Sprev(set, (void*) (pkey))
#define marIULSsize marsizeof[int]Usizeof[long]Ssize
#define marIULSfree marsizeof[int]Usizeof[long]Sfree
#define marIULSmemused marsizeof[int]Usizeof[long]Smemused
#define marIULScount marsizeof[int]Usizeof[long]Scount
#define marIULSiterator_init marsizeof[int]Usizeof[long]Siterator_init
#define marIULSiterator_destroy marsizeof[int]Usizeof[long]Siterator_destroy
#define marIULSiterate(set, pkey) (long*) marsizeof[int]Usizeof[long]Siterate(set, (void*) (pkey))

#define marISLUput (unsigned long*) marsizeof[int]Ssizeof[long]Uput
#define marISLUins (unsigned long*) marsizeof[int]Ssizeof[long]Uins
#define marISLUget (unsigned long*) marsizeof[int]Ssizeof[long]Uget
#define marISLUsanity marsizeof[int]Ssizeof[long]Usanity
#define marISLUprint marsizeof[int]Ssizeof[long]Uprint
#define marISLUfirst(set, pkey) (unsigned long*) marsizeof[int]Ssizeof[long]Ufirst(set, (void*) (pkey))
#define marISLUnext(set, pkey) (unsigned long*) marsizeof[int]Ssizeof[long]Unext(set, (void*) (pkey))
#define marISLUlast(set, pkey) (unsigned long*) marsizeof[int]Ssizeof[long]Ulast(set, (void*) (pkey))
#define marISLUprev(set, pkey) (unsigned long*) marsizeof[int]Ssizeof[long]Uprev(set, (void*) (pkey))
#define marISLUsize marsizeof[int]Ssizeof[long]Usize
#define marISLUfree marsizeof[int]Ssizeof[long]Ufree
#define marISLUmemused marsizeof[int]Ssizeof[long]Umemused
#define marISLUcount marsizeof[int]Ssizeof[long]Ucount
#define marISLUiterator_init marsizeof[int]Ssizeof[long]Uiterator_init
#define marISLUiterator_destroy marsizeof[int]Ssizeof[long]Uiterator_destroy
#define marISLUiterate(set, pkey) (unsigned long*) marsizeof[int]Ssizeof[long]Uiterate(set, (void*) (pkey))

#define marISLSput (long*) marsizeof[int]Ssizeof[long]Sput
#define marISLSins (long*) marsizeof[int]Ssizeof[long]Sins
#define marISLSget (long*) marsizeof[int]Ssizeof[long]Sget
#define marISLSsanity marsizeof[int]Ssizeof[long]Ssanity
#define marISLSprint marsizeof[int]Ssizeof[long]Sprint
#define marISLSfirst(set, pkey) (long*) marsizeof[int]Ssizeof[long]Sfirst(set, (void*) (pkey))
#define marISLSnext(set, pkey) (long*) marsizeof[int]Ssizeof[long]Snext(set, (void*) (pkey))
#define marISLSlast(set, pkey) (long*) marsizeof[int]Ssizeof[long]Slast(set, (void*) (pkey))
#define marISLSprev(set, pkey) (long*) marsizeof[int]Ssizeof[long]Sprev(set, (void*) (pkey))
#define marISLSsize marsizeof[int]Ssizeof[long]Ssize
#define marISLSfree marsizeof[int]Ssizeof[long]Sfree
#define marISLSmemused marsizeof[int]Ssizeof[long]Smemused
#define marISLScount marsizeof[int]Ssizeof[long]Scount
#define marISLSiterator_init marsizeof[int]Ssizeof[long]Siterator_init
#define marISLSiterator_destroy marsizeof[int]Ssizeof[long]Siterator_destroy
#define marISLSiterate(set, pkey) (long*) marsizeof[int]Ssizeof[long]Siterate(set, (void*) (pkey))

#define marLULUput (unsigned long*) marsizeof[long]Usizeof[long]Uput
#define marLULUins (unsigned long*) marsizeof[long]Usizeof[long]Uins
#define marLULUget (unsigned long*) marsizeof[long]Usizeof[long]Uget
#define marLULUsanity marsizeof[long]Usizeof[long]Usanity
#define marLULUprint marsizeof[long]Usizeof[long]Uprint
#define marLULUfirst(set, pkey) (unsigned long*) marsizeof[long]Usizeof[long]Ufirst(set, (void*) (pkey))
#define marLULUnext(set, pkey) (unsigned long*) marsizeof[long]Usizeof[long]Unext(set, (void*) (pkey))
#define marLULUlast(set, pkey) (unsigned long*) marsizeof[long]Usizeof[long]Ulast(set, (void*) (pkey))
#define marLULUprev(set, pkey) (unsigned long*) marsizeof[long]Usizeof[long]Uprev(set, (void*) (pkey))
#define marLULUsize marsizeof[long]Usizeof[long]Usize
#define marLULUfree marsizeof[long]Usizeof[long]Ufree
#define marLULUmemused marsizeof[long]Usizeof[long]Umemused
#define marLULUcount marsizeof[long]Usizeof[long]Ucount
#define marLULUiterator_init marsizeof[long]Usizeof[long]Uiterator_init
#define marLULUiterator_destroy marsizeof[long]Usizeof[long]Uiterator_destroy
#define marLULUiterate(set, pkey) (unsigned long*) marsizeof[long]Usizeof[long]Uiterate(set, (void*) (pkey))

#define marLULSput (long*) marsizeof[long]Usizeof[long]Sput
#define marLULSins (long*) marsizeof[long]Usizeof[long]Sins
#define marLULSget (long*) marsizeof[long]Usizeof[long]Sget
#define marLULSsanity marsizeof[long]Usizeof[long]Ssanity
#define marLULSprint marsizeof[long]Usizeof[long]Sprint
#define marLULSfirst(set, pkey) (long*) marsizeof[long]Usizeof[long]Sfirst(set, (void*) (pkey))
#define marLULSnext(set, pkey) (long*) marsizeof[long]Usizeof[long]Snext(set, (void*) (pkey))
#define marLULSlast(set, pkey) (long*) marsizeof[long]Usizeof[long]Slast(set, (void*) (pkey))
#define marLULSprev(set, pkey) (long*) marsizeof[long]Usizeof[long]Sprev(set, (void*) (pkey))
#define marLULSsize marsizeof[long]Usizeof[long]Ssize
#define marLULSfree marsizeof[long]Usizeof[long]Sfree
#define marLULSmemused marsizeof[long]Usizeof[long]Smemused
#define marLULScount marsizeof[long]Usizeof[long]Scount
#define marLULSiterator_init marsizeof[long]Usizeof[long]Siterator_init
#define marLULSiterator_destroy marsizeof[long]Usizeof[long]Siterator_destroy
#define marLULSiterate(set, pkey) (long*) marsizeof[long]Usizeof[long]Siterate(set, (void*) (pkey))

#define marLSLUput (unsigned long*) marsizeof[long]Ssizeof[long]Uput
#define marLSLUins (unsigned long*) marsizeof[long]Ssizeof[long]Uins
#define marLSLUget (unsigned long*) marsizeof[long]Ssizeof[long]Uget
#define marLSLUsanity marsizeof[long]Ssizeof[long]Usanity
#define marLSLUprint marsizeof[long]Ssizeof[long]Uprint
#define marLSLUfirst(set, pkey) (unsigned long*) marsizeof[long]Ssizeof[long]Ufirst(set, (void*) (pkey))
#define marLSLUnext(set, pkey) (unsigned long*) marsizeof[long]Ssizeof[long]Unext(set, (void*) (pkey))
#define marLSLUlast(set, pkey) (unsigned long*) marsizeof[long]Ssizeof[long]Ulast(set, (void*) (pkey))
#define marLSLUprev(set, pkey) (unsigned long*) marsizeof[long]Ssizeof[long]Uprev(set, (void*) (pkey))
#define marLSLUsize marsizeof[long]Ssizeof[long]Usize
#define marLSLUfree marsizeof[long]Ssizeof[long]Ufree
#define marLSLUmemused marsizeof[long]Ssizeof[long]Umemused
#define marLSLUcount marsizeof[long]Ssizeof[long]Ucount
#define marLSLUiterator_init marsizeof[long]Ssizeof[long]Uiterator_init
#define marLSLUiterator_destroy marsizeof[long]Ssizeof[long]Uiterator_destroy
#define marLSLUiterate(set, pkey) (unsigned long*) marsizeof[long]Ssizeof[long]Uiterate(set, (void*) (pkey))

#define marLSLSput (long*) marsizeof[long]Ssizeof[long]Sput
#define marLSLSins (long*) marsizeof[long]Ssizeof[long]Sins
#define marLSLSget (long*) marsizeof[long]Ssizeof[long]Sget
#define marLSLSsanity marsizeof[long]Ssizeof[long]Ssanity
#define marLSLSprint marsizeof[long]Ssizeof[long]Sprint
#define marLSLSfirst(set, pkey) (long*) marsizeof[long]Ssizeof[long]Sfirst(set, (void*) (pkey))
#define marLSLSnext(set, pkey) (long*) marsizeof[long]Ssizeof[long]Snext(set, (void*) (pkey))
#define marLSLSlast(set, pkey) (long*) marsizeof[long]Ssizeof[long]Slast(set, (void*) (pkey))
#define marLSLSprev(set, pkey) (long*) marsizeof[long]Ssizeof[long]Sprev(set, (void*) (pkey))
#define marLSLSsize marsizeof[long]Ssizeof[long]Ssize
#define marLSLSfree marsizeof[long]Ssizeof[long]Sfree
#define marLSLSmemused marsizeof[long]Ssizeof[long]Smemused
#define marLSLScount marsizeof[long]Ssizeof[long]Scount
#define marLSLSiterator_init marsizeof[long]Ssizeof[long]Siterator_init
#define marLSLSiterator_destroy marsizeof[long]Ssizeof[long]Siterator_destroy
#define marLSLSiterate(set, pkey) (long*) marsizeof[long]Ssizeof[long]Siterate(set, (void*) (pkey))

//
#define mar4UPput (void**) mar4Usizeof[void*]Uput
#define mar4UPins (void**) mar4Usizeof[void*]Uins
#define mar4UPget (void**) mar4Usizeof[void*]Uget
#define mar4UPsanity mar4Usizeof[void*]Usanity
#define mar4UPprint mar4Usizeof[void*]Uprint
#define mar4UPfirst (void**) mar4Usizeof[void*]Ufirst
#define mar4UPnext (void**) mar4Usizeof[void*]Unext
#define mar4UPlast (void**) mar4Usizeof[void*]Ulast
#define mar4UPprev (void**) mar4Usizeof[void*]Uprev
#define mar4UPsize mar4Usizeof[void*]Usize
#define mar4UPfree mar4Usizeof[void*]Ufree
#define mar4UPmemused mar4Usizeof[void*]Umemused
#define mar4UPcount mar4Usizeof[void*]Ucount
#define mar4UPiterator_init mar4Usizeof[void*]Uiterator_init
#define mar4UPiterator_destroy mar4Usizeof[void*]Uiterator_destroy
#define mar4UPiterate (void**) mar4Usizeof[void*]Uiterate

#define mar4SPput (void**) mar4Ssizeof[void*]Uput
#define mar4SPins (void**) mar4Ssizeof[void*]Uins
#define mar4SPget (void**) mar4Ssizeof[void*]Uget
#define mar4SPsanity mar4Ssizeof[void*]Usanity
#define mar4SPprint mar4Ssizeof[void*]Uprint
#define mar4SPfirst (void**) mar4Ssizeof[void*]Ufirst
#define mar4SPnext (void**) mar4Ssizeof[void*]Unext
#define mar4SPlast (void**) mar4Ssizeof[void*]Ulast
#define mar4SPprev (void**) mar4Ssizeof[void*]Uprev
#define mar4SPsize mar4Ssizeof[void*]Usize
#define mar4SPfree mar4Ssizeof[void*]Ufree
#define mar4SPmemused mar4Ssizeof[void*]Umemused
#define mar4SPcount mar4Ssizeof[void*]Ucount
#define mar4SPiterator_init mar4Ssizeof[void*]Uiterator_init
#define mar4SPiterator_destroy mar4Ssizeof[void*]Uiterator_destroy
#define mar4SPiterate (void**) mar4Ssizeof[void*]Uiterate

#define mar8UPput (void**) mar8Usizeof[void*]Uput
#define mar8UPins (void**) mar8Usizeof[void*]Uins
#define mar8UPget (void**) mar8Usizeof[void*]Uget
#define mar8UPsanity mar8Usizeof[void*]Usanity
#define mar8UPprint mar8Usizeof[void*]Uprint
#define mar8UPfirst (void**) mar8Usizeof[void*]Ufirst
#define mar8UPnext (void**) mar8Usizeof[void*]Unext
#define mar8UPlast (void**) mar8Usizeof[void*]Ulast
#define mar8UPprev (void**) mar8Usizeof[void*]Uprev
#define mar8UPsize mar8Usizeof[void*]Usize
#define mar8UPfree mar8Usizeof[void*]Ufree
#define mar8UPmemused mar8Usizeof[void*]Umemused
#define mar8UPcount mar8Usizeof[void*]Ucount
#define mar8UPiterator_init mar8Usizeof[void*]Uiterator_init
#define mar8UPiterator_destroy mar8Usizeof[void*]Uiterator_destroy
#define mar8UPiterate (void**) mar8Usizeof[void*]Uiterate

#define mar8SPput (void**) mar8Ssizeof[void*]Uput
#define mar8SPins (void**) mar8Ssizeof[void*]Uins
#define mar8SPget (void**) mar8Ssizeof[void*]Uget
#define mar8SPsanity mar8Ssizeof[void*]Usanity
#define mar8SPprint mar8Ssizeof[void*]Uprint
#define mar8SPfirst (void**) mar8Ssizeof[void*]Ufirst
#define mar8SPnext (void**) mar8Ssizeof[void*]Unext
#define mar8SPlast (void**) mar8Ssizeof[void*]Ulast
#define mar8SPprev (void**) mar8Ssizeof[void*]Uprev
#define mar8SPsize mar8Ssizeof[void*]Usize
#define mar8SPfree mar8Ssizeof[void*]Ufree
#define mar8SPmemused mar8Ssizeof[void*]Umemused
#define mar8SPcount mar8Ssizeof[void*]Ucount
#define mar8SPiterator_init mar8Ssizeof[void*]Uiterator_init
#define mar8SPiterator_destroy mar8Ssizeof[void*]Uiterator_destroy
#define mar8SPiterate (void**) mar8Ssizeof[void*]Uiterate

#define marIPput (void**) marsizeof[int]Ssizeof[void*]Uput
#define marIPins (void**) marsizeof[int]Ssizeof[void*]Uins
#define marIPget (void**) marsizeof[int]Ssizeof[void*]Uget
#define marIPsanity marsizeof[int]Ssizeof[void*]Usanity
#define marIPprint marsizeof[int]Ssizeof[void*]Uprint
#define marIPfirst(set, pkey) (void**) marsizeof[int]Ssizeof[void*]Ufirst(set, (void*) (pkey))
#define marIPnext(set, pkey) (void**) marsizeof[int]Ssizeof[void*]Unext(set, (void*) (pkey))
#define marIPlast(set, pkey) (void**) marsizeof[int]Ssizeof[void*]Ulast(set, (void*) (pkey))
#define marIPprev(set, pkey) (void**) marsizeof[int]Ssizeof[void*]Uprev(set, (void*) (pkey))
#define marIPsize marsizeof[int]Ssizeof[void*]Usize
#define marIPfree marsizeof[int]Ssizeof[void*]Ufree
#define marIPmemused marsizeof[int]Ssizeof[void*]Umemused
#define marIPcount marsizeof[int]Ssizeof[void*]Ucount
#define marIPiterator_init marsizeof[int]Ssizeof[void*]Uiterator_init
#define marIPiterator_destroy marsizeof[int]Ssizeof[void*]Uiterator_destroy
#define marIPiterate(set, pkey) (void**) marsizeof[int]Ssizeof[void*]Uiterate(set, (void*) (pkey))

#define marUPput (void**) marsizeof[int]Usizeof[void*]Uput
#define marUPins (void**) marsizeof[int]Usizeof[void*]Uins
#define marUPget (void**) marsizeof[int]Usizeof[void*]Uget
#define marUPsanity marsizeof[int]Usizeof[void*]Usanity
#define marUPprint marsizeof[int]Usizeof[void*]Uprint
#define marUPfirst(set, pkey) (void**) marsizeof[int]Usizeof[void*]Ufirst(set, (void*) (pkey))
#define marUPnext(set, pkey) (void**) marsizeof[int]Usizeof[void*]Unext(set, (void*) (pkey))
#define marUPlast(set, pkey) (void**) marsizeof[int]Usizeof[void*]Ulast(set, (void*) (pkey))
#define marUPprev(set, pkey) (void**) marsizeof[int]Usizeof[void*]Uprev(set, (void*) (pkey))
#define marUPsize marsizeof[int]Usizeof[void*]Usize
#define marUPfree marsizeof[int]Usizeof[void*]Ufree
#define marUPmemused marsizeof[int]Usizeof[void*]Umemused
#define marUPcount marsizeof[int]Usizeof[void*]Ucount
#define marUPiterator_init marsizeof[int]Usizeof[void*]Uiterator_init
#define marUPiterator_destroy marsizeof[int]Usizeof[void*]Uiterator_destroy
#define marUPiterate(set, pkey) (void**) marsizeof[int]Usizeof[void*]Uiterate(set, (void*) (pkey))

#define marLPput (void**) marsizeof[long]Ssizeof[void*]Uput
#define marLPins (void**) marsizeof[long]Ssizeof[void*]Uins
#define marLPget (void**) marsizeof[long]Ssizeof[void*]Uget
#define marLPsanity marsizeof[long]Ssizeof[void*]Usanity
#define marLPprint marsizeof[long]Ssizeof[void*]Uprint
#define marLPfirst(set, pkey) (void**) marsizeof[long]Ssizeof[void*]Ufirst(set, (void*) (pkey))
#define marLPnext(set, pkey) (void**) marsizeof[long]Ssizeof[void*]Unext(set, (void*) (pkey))
#define marLPlast(set, pkey) (void**) marsizeof[long]Ssizeof[void*]Ulast(set, (void*) (pkey))
#define marLPprev(set, pkey) (void**) marsizeof[long]Ssizeof[void*]Uprev(set, (void*) (pkey))
#define marLPsize marsizeof[long]Ssizeof[void*]Usize
#define marLPfree marsizeof[long]Ssizeof[void*]Ufree
#define marLPmemused marsizeof[long]Ssizeof[void*]Umemused
#define marLPcount marsizeof[long]Ssizeof[void*]Ucount
#define marLPiterator_init marsizeof[long]Ssizeof[void*]Uiterator_init
#define marLPiterator_destroy marsizeof[long]Ssizeof[void*]Uiterator_destroy
#define marLPiterate(set, pkey) (void**) marsizeof[long]Ssizeof[void*]Uiterate(set, (void*) (pkey))

#define marLUPput (void**) marsizeof[long]Usizeof[void*]Uput
#define marLUPins (void**) marsizeof[long]Usizeof[void*]Uins
#define marLUPget (void**) marsizeof[long]Usizeof[void*]Uget
#define marLUPsanity marsizeof[long]Usizeof[void*]Usanity
#define marLUPprint marsizeof[long]Usizeof[void*]Uprint
#define marLUPfirst(set, pkey) (void**) marsizeof[long]Usizeof[void*]Ufirst(set, (void*) (pkey))
#define marLUPnext(set, pkey) (void**) marsizeof[long]Usizeof[void*]Unext(set, (void*) (pkey))
#define marLUPlast(set, pkey) (void**) marsizeof[long]Usizeof[void*]Ulast(set, (void*) (pkey))
#define marLUPprev(set, pkey) (void**) marsizeof[long]Usizeof[void*]Uprev(set, (void*) (pkey))
#define marLUPsize marsizeof[long]Usizeof[void*]Usize
#define marLUPfree marsizeof[long]Usizeof[void*]Ufree
#define marLUPmemused marsizeof[long]Usizeof[void*]Umemused
#define marLUPcount marsizeof[long]Usizeof[void*]Ucount
#define marLUPiterator_init marsizeof[long]Usizeof[void*]Uiterator_init
#define marLUPiterator_destroy marsizeof[long]Usizeof[void*]Uiterator_destroy
#define marLUPiterate(set, pkey) (void**) marsizeof[long]Usizeof[void*]Uiterate(set, (void*) (pkey))

//
#ifdef __cplusplus
}
#endif

#endif // __MARIKA_H__
